scriptencoding utf-8

" Plugged
source ~/.vim/bundle.vim

" myfiletypes : an augroup for my autocmd
augroup myfiletypes
  " Clear old autocmds in group
  autocmd!
  " autoindent with two spaces, always expand tabs
  autocmd FileType ruby,eruby,yaml setlocal ai sw=2 sts=2 et
  autocmd FileType ruby,eruby,yaml setlocal path+=lib
  autocmd FileType ruby,eruby,yaml setlocal colorcolumn=80
  " Make ?s part of words
  autocmd FileType ruby,eruby,yaml setlocal iskeyword+=?
  autocmd BufRead,BufNewFile *.md setlocal spell
  autocmd BufRead,BufNewFile Dangerfile set filetype=ruby
augroup END

set nobackup            " do not make backup before saving
set nowritebackup       " do not write backup before saving
set history=50          " remember 50 commands
set ruler               " show the cursor position all the time
set showcmd             " display incomplete commands
set showmode            " show the current mode
set laststatus=2        " Always display the status line
set nowrap              " set nowrap
set t_ti= t_te=         " Prevent Vim from clobbering the scrollback buffer.
set scrolloff=3         " keep at least three lines visible above/below cursor

set colorcolumn=80      " show a marker at 80th character
highlight ColorColumn ctermbg=DarkGray
set hlsearch            " Highlight searches
set incsearch           " do incremental searching
set ignorecase          " searches are case insensitive...
set smartcase           " ... unless they contain at least one capital letter
set gdefault            " have :s///g flag by default on

set cursorline          " highlight the line the cursor is on
set synmaxcol=800       " don't try to highlight long lines
set number              " show line numbers
set clipboard=unnamed   " use system clipboard by default!

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" Auto-reload buffers when file changed on disk
set autoread

" Disable swap files; systems don't crash that often these days
set updatecount=0

" colors and syntax highlighting
if (has("termguicolors"))
 set termguicolors
endif

syntax on
syntax enable

set background=dark
if !empty($VIM_COLORSCHEME)
  colorscheme $VIM_COLORSCHEME
else
  colorscheme base16-dracula
endif

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set expandtab

" Scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" make the tab key match bracket pairs
nnoremap <tab> %
vnoremap <tab> %

" use the dot command on visual selections
vnoremap . :norm.<CR>

" Tab bar line
set showtabline=2                 " always show tab bar

" Display extra whitespace etc.
set list listchars=tab:▸\ ,trail:·

" It's easier to press Space than / for searching:
nnoremap <Space> /
nnoremap <C-Space> ?
nnoremap </> /\v

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Make moving up/down work on wrapped lines of text
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> ^ g^
nnoremap <silent> $ g$

" Disable error bells
set noerrorbells
set visualbell

" Allow for spelling tab completion when enabled
set complete+=kspell

" Spell check and automatic wrapping at 72 columns for commit messages
autocmd Filetype gitcommit setlocal spell textwidth=72

" force markdown format for all .md files http://goo.gl/2xSiBU
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.

silent !mkdir -p ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

" save on losing focus
au FocusLost * :wa

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" <,> is the leader character
let mapleader = ","

" NETRW
let g:netrw_banner=0    " do not display info on the top of window
let g:netrw_altv=1      " open splits to the right
let g:netrw_liststyle=3 " tree view

" No Help, please
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Disable Ex mode
map Q <Nop>

" Disable K looking stuff up
map K <Nop>

" Bind :Q to :q etc
command! Q q
command! Qall qall
command! QA qall
command! E e

" Pane navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-L> <C-W><C-L>

" select last paste in visual mode
nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'

"Visual mode blockwise indentEdit
vmap > >gv
vmap < <gv
set shiftround " When at 3 spaces and I hit >>, go to 4, not 5

" Quickly hide search highlighting
" nnoremap <silent> <leader>n :silent :nohlsearch<CR>
:nnoremap <CR> :nohlsearch<cr>

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" Search down into subfolders. Provides tab-completion for all file-related tasks
set path+=**

" complete settings
set wildmenu

" add gems.tags to ctags list
set tags+=gems.tags

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SELECT ALL
" Hit Ctrl+A to select all in current buffer
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <C-a> ggVG

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MARK DOWN
" Hit leader+m to preview markdown file in Marked
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:nnoremap <leader>m :silent !open -a Marked\ 2.app '%:p' -g<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

filetype plugin indent on

augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
  autocmd FileType asciidoc setlocal textwidth=78
  autocmd FileType asciidoc setlocal spell

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

map <leader>n :call file#Rename()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TEXT EXPANSION
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
imap clog console.log(
imap <C-L> <SPACE>=><SPACE>

abbr bp binding.pry<ESC>:w<CR>

" create Jira Markdown Link: type a ticket number, space, jt, space
abbr jt <esc>xv3bdi[<esc>pa](https://technekes.atlassian.net/browse/<esc>pa)<esc>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" EDIT IN CURRENT DIRECTORY
" Edit another file in the same directory as the current file
" uses expression to extract path from current file's path
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Leader>e :e <C-R>=escape(expand("%:p:h"),' ') . '/'<CR><CR>
map <Leader>s :split <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR><CR>
map <Leader>v :vnew <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Emacs-like beginning and end of line (insert mode)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
imap <c-e> <c-o>$
imap <c-a> <c-o>^

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Trailing spaces
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" delete on buffer write
augroup spaces
    autocmd!
    autocmd BufWritePre * %s/\s\+$//e
augroup END

" Strip trailing whitespace (,ss)
noremap <leader>ss :call whitespace#Strip()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" create a new tab
nnoremap <leader>t :tabnew<CR>
inoremap <leader>t <Esc>:tabnew<CR>

" navigate left and right
nnoremap <S-l> :tabnext<CR>
nnoremap <S-h> :tabprevious<CR>
